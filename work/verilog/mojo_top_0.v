/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    output reg spi_miso,
    output reg [3:0] spi_channel,
    output reg avr_rx,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    output reg [7:0] io_seghs,
    output reg [3:0] io_selhs,
    input green_button,
    input switch
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_sc_easy;
  wire [1-1:0] M_sc_hard;
  wire [1-1:0] M_sc_hold;
  stateCounter_1 sc (
    .clk(clk),
    .rst(rst),
    .easy(M_sc_easy),
    .hard(M_sc_hard),
    .hold(M_sc_hold)
  );
  wire [2-1:0] M_ctr_value;
  counter_2 ctr (
    .clk(clk),
    .rst(rst),
    .value(M_ctr_value)
  );
  wire [16-1:0] M_gameMachine_high_score;
  wire [4-1:0] M_gameMachine_mainSeg3_char;
  wire [4-1:0] M_gameMachine_mainSeg2_char;
  wire [4-1:0] M_gameMachine_mainSeg1_char;
  wire [4-1:0] M_gameMachine_mainSeg0_char;
  reg [1-1:0] M_gameMachine_easy_mode;
  reg [1-1:0] M_gameMachine_pressed;
  reg [1-1:0] M_gameMachine_rise;
  reg [1-1:0] M_gameMachine_sc_hold;
  beta_3 gameMachine (
    .clk(clk),
    .rst(rst),
    .easy_mode(M_gameMachine_easy_mode),
    .pressed(M_gameMachine_pressed),
    .rise(M_gameMachine_rise),
    .sc_hold(M_gameMachine_sc_hold),
    .high_score(M_gameMachine_high_score),
    .mainSeg3_char(M_gameMachine_mainSeg3_char),
    .mainSeg2_char(M_gameMachine_mainSeg2_char),
    .mainSeg1_char(M_gameMachine_mainSeg1_char),
    .mainSeg0_char(M_gameMachine_mainSeg0_char)
  );
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_4 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_btn_cond_out;
  reg [1-1:0] M_btn_cond_in;
  button_conditioner_5 btn_cond (
    .clk(clk),
    .in(M_btn_cond_in),
    .out(M_btn_cond_out)
  );
  wire [1-1:0] M_edge_dt_out;
  reg [1-1:0] M_edge_dt_in;
  edge_detector_6 edge_dt (
    .clk(clk),
    .in(M_edge_dt_in),
    .out(M_edge_dt_out)
  );
  
  reg [0:0] easy_mode;
  
  reg [0:0] pressed;
  
  reg [0:0] rise;
  
  reg [0:0] hold;
  
  reg [15:0] high_score;
  
  reg [15:0] quotientHS1;
  
  reg [15:0] quotientHS10;
  
  reg [15:0] tempHS10;
  
  wire [7-1:0] M_mainSeg3_segs;
  reg [4-1:0] M_mainSeg3_char;
  seven_seg_7 mainSeg3 (
    .char(M_mainSeg3_char),
    .segs(M_mainSeg3_segs)
  );
  
  wire [7-1:0] M_mainSeg2_segs;
  reg [4-1:0] M_mainSeg2_char;
  seven_seg_7 mainSeg2 (
    .char(M_mainSeg2_char),
    .segs(M_mainSeg2_segs)
  );
  
  wire [7-1:0] M_mainSeg1_segs;
  reg [4-1:0] M_mainSeg1_char;
  seven_seg_7 mainSeg1 (
    .char(M_mainSeg1_char),
    .segs(M_mainSeg1_segs)
  );
  
  wire [7-1:0] M_mainSeg0_segs;
  reg [4-1:0] M_mainSeg0_char;
  seven_seg_7 mainSeg0 (
    .char(M_mainSeg0_char),
    .segs(M_mainSeg0_segs)
  );
  
  wire [7-1:0] M_hsSeg3_segs;
  reg [4-1:0] M_hsSeg3_char;
  seven_seg_7 hsSeg3 (
    .char(M_hsSeg3_char),
    .segs(M_hsSeg3_segs)
  );
  
  wire [7-1:0] M_hsSeg2_segs;
  reg [4-1:0] M_hsSeg2_char;
  seven_seg_7 hsSeg2 (
    .char(M_hsSeg2_char),
    .segs(M_hsSeg2_segs)
  );
  
  wire [7-1:0] M_hsSeg1_segs;
  reg [4-1:0] M_hsSeg1_char;
  seven_seg_7 hsSeg1 (
    .char(M_hsSeg1_char),
    .segs(M_hsSeg1_segs)
  );
  
  wire [7-1:0] M_hsSeg0_segs;
  reg [4-1:0] M_hsSeg0_char;
  seven_seg_7 hsSeg0 (
    .char(M_hsSeg0_char),
    .segs(M_hsSeg0_segs)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_seg = 8'hff;
    io_sel = 4'hf;
    io_seghs = 8'hff;
    io_selhs = 4'hf;
    M_btn_cond_in = green_button;
    M_edge_dt_in = M_btn_cond_out;
    pressed = M_edge_dt_out;
    if (switch) begin
      rise = M_sc_easy;
      hold = M_sc_hold;
      easy_mode = 1'h1;
    end else begin
      rise = M_sc_hard;
      hold = M_sc_hold;
      easy_mode = 1'h0;
    end
    M_gameMachine_easy_mode = easy_mode;
    M_gameMachine_pressed = pressed;
    M_gameMachine_rise = rise;
    M_gameMachine_sc_hold = hold;
    high_score = M_gameMachine_high_score;
    M_mainSeg0_char = M_gameMachine_mainSeg0_char;
    M_mainSeg1_char = M_gameMachine_mainSeg1_char;
    M_mainSeg2_char = M_gameMachine_mainSeg2_char;
    M_mainSeg3_char = M_gameMachine_mainSeg3_char;
    quotientHS1 = high_score / 4'ha;
    M_hsSeg0_char = high_score - (4'ha * quotientHS1);
    tempHS10 = high_score / 4'ha;
    quotientHS10 = tempHS10 / 4'ha;
    M_hsSeg1_char = tempHS10 - (4'ha * quotientHS10);
    M_hsSeg2_char = 4'hf;
    M_hsSeg3_char = 4'hf;
    
    case (M_ctr_value)
      1'h0: begin
        io_seg = ~M_mainSeg0_segs;
        io_sel = 4'h1;
        io_seghs = ~M_hsSeg0_segs;
        io_selhs = 4'h1;
      end
      1'h1: begin
        io_seg = ~M_mainSeg1_segs;
        io_sel = 4'h2;
        io_seghs = ~M_hsSeg1_segs;
        io_selhs = 4'h2;
      end
      2'h2: begin
        io_seg = ~M_mainSeg2_segs;
        io_sel = 4'h4;
        io_seghs = ~M_hsSeg2_segs;
        io_selhs = 4'h4;
      end
      2'h3: begin
        io_seg = ~M_mainSeg3_segs;
        io_sel = 4'h8;
        io_seghs = ~M_hsSeg3_segs;
        io_selhs = 4'h8;
      end
      default: begin
        io_seg = ~M_mainSeg0_segs;
        io_sel = 4'h1;
        io_seghs = ~M_hsSeg0_segs;
        io_selhs = 4'h1;
      end
    endcase
  end
endmodule
