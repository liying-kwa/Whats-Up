module add (
    input a[16],  // 16 bit input a
    input b[16],  //16 bit input b
    input alufn[6],  //6 bit opcode
    output sum[16], //16 bit sum output
    output error[3], // 3 bit error output
    output z, // z output for cmp.luc module 
    output v, // v output overflow for cmp.luc module
    output n // n output for cmp.luc module
  ) 
  
  {
   sig s[16]; //variable for calculating output

  always {
    s = 0;
    error = 0;  // no possible invalid alufn here
    case(alufn[0]) {
      1b0: s = a+b; // perform addition
      1b1: s = a-b; // perform subtraction
      // no default since no possible invalid alufn here      
    }
    sum = s;
    z = ~|s; // z = 1 when s = 0
    v = (a[15] & (b[15] ^ alufn[0]) & !s[15]) | (!a[15] & !(b[15] ^ alufn[0]) & s[15]); // v is overflow when the sign of the result differs from the sign of the operands
    n = s[15]; // most sig bit of sum
  }
}